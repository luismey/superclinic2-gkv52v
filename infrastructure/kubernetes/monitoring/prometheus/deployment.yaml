# Prometheus Deployment Configuration
# Version: v2.45.0
# Purpose: Production-grade Prometheus server deployment with enhanced security, reliability and performance
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: porfin-system
  labels:
    app: porfin
    component: monitoring
    service: prometheus
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9090"
spec:
  # Single replica as we're using persistent storage
  replicas: 1
  selector:
    matchLabels:
      app: porfin
      component: monitoring
      service: prometheus
  # Use Recreate strategy since we have persistent volume
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: porfin
        component: monitoring
        service: prometheus
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
    spec:
      # Use dedicated service account for Prometheus
      serviceAccountName: prometheus
      # Enhanced security context for pod
      securityContext:
        fsGroup: 65534  # nobody group
        runAsNonRoot: true
        runAsUser: 65534  # nobody user
      # Allow proper shutdown and data persistence
      terminationGracePeriodSeconds: 300
      containers:
      - name: prometheus
        image: prom/prometheus:v2.45.0
        args:
          - --config.file=/etc/prometheus/prometheus.yml
          - --storage.tsdb.path=/prometheus
          - --storage.tsdb.retention.time=15d
          - --storage.tsdb.retention.size=50GB
          - --web.enable-lifecycle
          - --web.enable-admin-api
          - --web.console.libraries=/usr/share/prometheus/console_libraries
          - --web.console.templates=/usr/share/prometheus/consoles
        ports:
          - name: http
            containerPort: 9090
            protocol: TCP
        # Production-grade resource limits
        resources:
          requests:
            cpu: "500m"
            memory: "2Gi"
          limits:
            cpu: "1"
            memory: "4Gi"
        volumeMounts:
          - name: config
            mountPath: /etc/prometheus
          - name: storage
            mountPath: /prometheus
        # Health checking
        livenessProbe:
          httpGet:
            path: /-/healthy
            port: http
          initialDelaySeconds: 30
          periodSeconds: 15
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /-/ready
            port: http
          initialDelaySeconds: 15
          periodSeconds: 5
          timeoutSeconds: 4
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /-/ready
            port: http
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 4
          failureThreshold: 30
        # Enhanced container security context
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - ALL
          readOnlyRootFilesystem: true
      # Configuration and storage volumes
      volumes:
        - name: config
          configMap:
            name: prometheus-config
        - name: storage
          persistentVolumeClaim:
            claimName: prometheus-storage
      # Node affinity for Linux nodes
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: kubernetes.io/os
                    operator: In
                    values:
                      - linux